-----------------------
Open Terminal - cntrl alt t
Close Terminal - cntrl shift W  (window)  cntrl shift Q  (quit terminal)
Paste into terminal - cntrl shift v
navigate to root folder:  cd /
navigate to home/user  directory cd ~

Desktop - cntrl alt d
Close window - cntrl q

Help on anything - man   (eg:  man rm)

to review page at a time:  | less

Make folder or dir - mkdir
move (or rename) a folder - mv
Remove an empty directory: rmdir [dirname]     //won't work if files still in it
Remove a non emplty directrory   rm -fr  [dirname]    //the f is force (ignore the non empty nature) the r is recursivle down the tree
Delete a file:   rm [filename]

To find a word in a file use: grep -r word      //r is recursively sub-directories

for permissions (can't edit root directory folders, use   sudo  (super user do - eg:  sudo mv /home/user/oldname /home/user/newname)

info on partitions  -  sudo parted -l  (gives filesystem)  or sudo fdisk-l

In package manager (if you don't have one install one!) find  bash-completion    //can hit TAB and it auto-completes

To create a new file and add some text:   echo "Earth's Moon" >> locations.txt    //new txt file containing: Earth's Moon

----------------------------------
NodeJS

To check curent version install   node -v

To install the best Node version manager:  
 sudo npm cache clean -f
 sudo npm install -g n install -g   (is a node manager)  
 
to list Node versions:  n ls

to install preferred version: sudo n install 9.2.2   //or whichever required

Search for Nodejs modules - personally I still use npmjs.com gui works OK, then install once found via terminal

To list all globally installed packages (this is global packages, depth=0 is just that package, depth =1, depth=2 etc dependent packages.
npm list -g --depth 0
npm ls --depth=0   -> just locally installed

To install multiple packages as dependencies: npm i -S Mocha Chai
To install multiple packages as dev dependencies: npm i -D Mocha Chai

----------------------------------


MongoDB - need to be in the directory root  (cd /)  and mkdir  /data/db  -  must be XFS file (for WiredTiger storage engine) - if on EXT4
To change from MVAPP just delete all of the files in /data/db it will rebuild them with wiredTiger

change storage engine to wiredTiger (google it)

mongod -> starts DB
mongo -> starts the shell

-----------------------------------------------
To change Storage Engine in Mongo DB on Ubuntu Linux from WiredTiger to MMAPv1 (or vice versa)

Assuming you don't have data that needs backing up, as you've run into this issue you probably have an EXT4 file system that WiredTiger struggles with, rather than XFS   (if you do then probably export/ back up the data first then re-import) to check your current filesystem use:
sudo parted -l

First rename the folder /data/db  which contains the old WireTiger storage data  (suggest rename the old folder to   /dataWiredT so you keep it if you ever revert)
sudo mv /data /dataWiredT

create a new  /data/db
mkdir /data
mkdir /data/db  

you can try to alter Storage Engine now by:
mongod --storageEngine=mmapv1 --dbpath /data/db

More info here on how to Change Storage Engine  https://docs.mongodb.com/manual/tutorial/change-standalone-wiredtiger/   (for MVAPP use reverse as you've just done)


You may hit a permission issue 'lock' on your new /data/db read only folder then use:
sudo chmod -R go+w /data/db    to alter permissions  

(note that will allow anyone to write - if production DB consider security - some more info here:  https://stackoverflow.com/questions/42446931/mongodb-exception-in-initandlisten-20-attempted-to-create-a-lock-file-on-a-rea 

Note, there may be usual Warnings about Access Control & Read/ Write access not restricted to fix once started MongoDB

----------------------------------------------
MongoDB:

to start db:  mongod
to start shell:  mongo

db.createUser({user: "dbadmin", pwd: "Brandon45$$", roles: ["readWriteAnyDatabase", "dbAdminAnyDatabase", "clusterAdmin"]})

Shut down server
use admin
db.shutdownServer()

To authenticate onto admin:
> use admin
> db.auth("useradmin", "Brandon45$$")    //or dbadmin

to start server requiring authentication:  mongod --auth --port 27017 --dbpath /data/db


----------------------------------------------
VS Code
Mocha - Command Palette (F1) Mocha run All Tests

-----------------------------------------------

Git / github

To start a project from scratch, create the folder on Github, then git clone the repo, then add files to that repo and add/ commit/ push back up

If you use Git init in the folder, it will be a different repo from the Github one, in which case you have to merge them with different histories using:
git pull <remote repo> --allow-unrelated-histories

Initialize a repo:
Git init

git pull  -  brings down remote changes into local and merges
git pull origin master
Git fetch brings down changes, but then you manually need to merge them
Git clone you use once, or if you mess up your local directory

 -> checkout a new branch:
git checkout -b cool-new-feature  ->  git branch cool-new-feature  &&  git checkout cool-new-feature

git merge cool-feature master   ->  to merge back into master with no conflicts




To add changes to staging I do:
git add --all

To commit I do:
git commit --all

to push:
git push remote origin master https://github.com/leigh-1/leetcode.git  ?
or try:
git remote add origin https://github.com/leigh-1/leetcode.git
git push -u origin master     // -u remembers settings so you can just do git push next time

To upload to a repo on Github, ensure there is an empty folder without a readme (add it later) then do:
  git add somefile.txt
  git add *
  git add '*.txt'
  git commit -m "Adding new files message goes here"
  git push
  git log
  git log --summary
  git remote add origin https://github.com/try-git/try_git.git
  git push -u origin master     // -u remembers your settings so can just do   git push  next time
  git pull origin master
  git diff HEAD
  git diff --staged   // git diff with the --staged option to see the changes you just staged
  git reset octofamily/octodog.txt  // You can unstage files by using the git reset command
  git checkout -- octocat.txt    // Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. Go ahead and get rid of all the changes since the last commit for octocat.txt
  git branch clean_up
  git checkout clean_up
  git rm '*.txt'
  git commit -m "Remove all the cats"
  git checkout master
  git merge clean_up
  git branch -d clean_up    // -d deletes a branch
    git push

If created submodules in error, or submodules with changes uncomitted you'll see folders you can't access and using:  git diff   shows +  and dirty
in the root folder of the module use: 

Remove the whole module from local cache  (back it up somewhere first)  then use:
git submodule update
git push

should work, if not try: git submodule foreach --recursive git checkout
git commit --all
git push

https://github.com/leigh-1/leetcode.git

To change the source url (I changed username):  git remote set-url origin https://github.com/leighmathieson/codewars.git

git log   -> check overview of commits
git log --stat     -> slightly more detailed view
git log -p  ||  git log --patch  ||  git log -p -2 -> lists detail of all last 2 commits 
git log --pretty=oneline   -> one line view
git log --pretty=format:"%h - %an, %ar : %s"  -> specify own format (many more options avail than these)
git log --graph  -> can see commit branches and 
git log --pretty=format:"%h %s" --graph  -> using graph with pretty
git log --since=2.weeks   -> since
git log --before="2008-11-01"    -> before
git log -S function_name    -> find any references of changes by function name
git commit --amend   -> change last commit message  (can be used to change actual diffs also, need to read around that)
 rebasing is where need to change commits or roll small changes into a larger commit - only do with local commits though not with remote

cntrl-z to quit the git log

git branch  -> git branch --list

--> https://www.atlassian.com/git/tutorials/using-branches

To check diffs: git diff HEAD~2

delete a remote branch, use push with delete flag:   git push origin --delete testleigh
Then might need to do: git fetch -p origin    to remove the local references to deleted remote branches

Git
Git config —list
git config —global user.name “my name”
git config —global user.email le@l.com

git status
git diff (changed not staged)
git diff —staged Staged not committed
git commit
-m ‘some story’
-a -m ‘skips the add staging’

rm somefile
git rm somefile
Commit

To rm a file from git but keep it in folder, add to gitignore then git rm -r --cached "path/to/ignored/directories"

git rm —cached to keep file but untrack

git mv afile another file (renames it)

git log
-p -2
—stat
—pretty=oneline|full fuller format

—pretty=format:”%h %s” —graph

git reflog —date=local branchName
Gives when branch created

—since=2.weeks
=“2008-01-15”
=“1 year 2 weeks 1 day ago”
=until
git branch —all or -a. The remote brnchs

Git commit —amend (make additional change to last commit)

Gitk
git remote

git reset HEAD file to unstage
git checkout — file to discard changes

git remote -v
git remote add aRem “git://url”
To add a remote, git fetch aRem it’s locally known as aRem/master ?

git branch BrName
git checkout BrName

= git checkout -b BrName

To delete a remote branch:
git push --delete origin i18n_libs_test 
git fetch --prune

To delete a local branch:
git branch -D i18n_libs_test   (-d won't force if not fully merged, -D forces)


------------------------------------------------

npx webpack  -> packs from src to dist
  

------------------------------------------------

Decompiling / Coverting  .pyc to .py
$ sudo git clone https://github.com/wibiti/uncompyle2.git
$ cd uncompyle2
$ sudo python setup.py install
$ cd uncompyle2
$ sudo uncompyle2 [compiled].pyc > [decompiled].py

------ 

List processes running: sudo lsof -t -i   or sudo lsof -t -i:3000
sudo lsof -i -P -n | grep LISTEN    (for ports)
Kill process:  sudo kill -9 {the process id}    (-9 is force)

-----------------

Virtualenv:  virtualenv -p /usr/bin/python3.6 localstackenv
source localstackenv/bin/activate

Ubuntu server, root user:  crontab -e
@reboot npm start --prefix /home/ubuntu/kinesisinsight;
@reboot npm start --prefix /home/ubuntu/kinesisinsight/charts-cli;

sam package --template-file template2.yaml --s3-bucket vision-man-deploy --output-template-file packaged-template2.yaml
sam deploy --template-file /home/leighm/projects/vision/packaged-template2.yaml --stack-name vision-man-deployed --capabilities CAPABILITY_NAMED_IAM
aws cloudformation delete-stack --stack-name vision-man-deployed
